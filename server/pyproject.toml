[project]
name = "backend"
version = "0.1.0"
description = "Default template for PDM package"
authors = [{ name = "Aryan Iyappan", email = "aryaniyappan2006@gmail.com" }]
dependencies = [
    "fastapi>=0.110.0",
    "starlette>=0.36.3",
    "asgi-correlation-id>=4.3.1",
    "asgi-ratelimit>=0.10.0",
    "uvicorn[standard]>=0.29.0",
    "pydantic>=2.6.4",
    "pydantic-settings>=2.2.1",
    "sqlalchemy>=2.0.28",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "orjson>=3.9.15",
    "structlog>=24.1.0",
    "redis>=5.0.3",
    "ory-kratos-client>=1.1.0",
]
requires-python = "==3.12.*"
readme = "README.md"
license = { text = "MIT" }


[tool.pdm]
distribution = false

[tool.pdm.dev-dependencies]
dev = ["mypy>=1.9.0", "ruff>=0.3.4", "black>=24.3.0", "rich>=13.7.1"]

[tool.pdm.scripts]
server = "app/server.py"
lint = { composite = ["black .", "ruff --fix .", "black .", "mypy ."] }

[tool.setuptools.packages.find]
where = ["."] # list of folders that contain the packages (["."] by default)
include = [
    "*",
] # package names should match these glob patterns (["*"] by default)
exclude = [] # exclude packages matching these glob patterns (empty by default)
namespaces = false # to disable scanning PEP 420 namespaces (true by default)

[tool.pytest.ini_options]
timeout = 5

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = ["^.venv/"]

strict = true
follow_imports = "normal"
ignore_missing_imports = false

disallow_untyped_calls = false

allow_redefinition = false
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_return_any = false
warn_unreachable = true

pretty = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["uvicorn.*"]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.ruff]
src = ["app", "tests"]
fixable = ["F", "E", "W", "I", "COM", "UP", "RUF"]
unfixable = [
    "F841", # variable  is assigned to but never used
]
select = ["ALL"]
ignore = [
    "E501",    # line length
    "ANN101",
    "ANN102",
    "D10",     # disable mandatory docstrings
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "PD",      # pandas-vet
    "PLR0913", # too many arguments
    "TCH001",
    "TCH002",
    "TCH003",
    "EXE",
    "COM812",
    "ISC001",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "S105", "S106"]
"migrations/*" = ["INP001"]
"migrations/versions/*" = ["D400", "D415"]


[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"starlette.status".msg = "Use http.HTTPStatus instead."
"fastapi.status".msg = "Use http.HTTPStatus instead."
"httpx.codes".msg = "Use http.HTTPStatus instead."
